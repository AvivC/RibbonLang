test basic import
    import testmodule
file testmodule.pln
    print("Importing testmodule")
expect
    Importing testmodule
end

test nested imports
    import testmodule1
    print("main")
file testmodule1.pln
    import testmodule2
    print("1")
file testmodule2.pln
    print("2")
expect
    2
    1
    main
end

test module caching
    import testmodule1
    import testmodule1
    import testmodule2
    import testmodule1
    import testmodule2
file testmodule1.pln
    print("I'm testmodule1")
file testmodule2.pln
    print("I'm testmodule2")
expect
    I'm testmodule1
    I'm testmodule2
end

test module attributes
    import testmodule1

    print(testmodule1.attr1)
    print(testmodule1.func1(2))
    print(testmodule1.func2(2))

    testmodule1.func1 = { | x |
        return x * 10
    }

    print(testmodule1.func1(2))
    print(testmodule1.func2(2))

    testmodule1.nonexistent # this will crash the program with an error
file testmodule1.pln
    attr1 = "I'm an attribute"
    func1 = { | x |
        return x * 2
    }
    func2 = { | n |
        return func1(n * 2)
    }
expect
    I'm an attribute
    4
    8
    20
    40
    An error has occured. Stack trace (most recent call on top):
        -> <Anonymous function>
    Cannot find attribute nonexistent of object.
end

test import stdlib module
    import math
    print(math.abs(-4))
expect
    4
end

test user module takes precedence over stdlib module
    import math
    print(math.user_module_variable)
    import math  # won't print anything because module is already cached
    print(math.user_module_variable)
file math.pln
    print("I'm the math.pln user module")
    user_module_variable = 10
expect
    I'm the math.pln user module
    10
    10
end

test unfound module raises error
    # Generally we currently lack error-case tests, because the output of errors is temporary
    # and the tests will be fragile. In this case we do write one, and will rewrite it in the future

    import the_pretty_horse_module
    print("This will never print")
expect
    An error has occured. Stack trace (most recent call on top):
        -> <Anonymous function>
    Couldn't find module the_pretty_horse_module.
end

test load stdlib extension module
    import myextension
    print(myextension.multiply(2, 8.5))
expect
    17
end

test load user extension module
    import myuserextension
    print(myuserextension.multiply(8, 4))
expect
    32
end

test extension classes
    import myuserextension
    import my_second_user_extension

    MyThingA = myuserextension.MyThingA
    
    thing_a = MyThingA("Hello world :D")
    print(thing_a.get_text())

    thing_b = my_second_user_extension.MyThingB(thing_a)
    multiply_func = thing_b.get_text_multiplied
    print(multiply_func(3))
expect
    Hello world :D
    Hello world :DHello world :DHello world :D
end

test extension imports and uses other extension
    import myuserextension
    import my_second_user_extension

    sqr_6 = my_second_user_extension.square(6)
    print(sqr_6)
expect
    Getting other extension.
    Getting the multiply() method from the extension.
    Calling multiply().
    Returned from multiply(). Returning the value.
    36
end

test extension causes the import of another extension
    import my_second_user_extension

    sqr_7 = my_second_user_extension.square(7)
    print(sqr_7)
expect
    Getting other extension.
    Other extension not imported yet. Importing it.
    Imported successfully.
    Now getting the extension.
    Got the extension successfully.
    Getting the multiply() method from the extension.
    Calling multiply().
    Returned from multiply(). Returning the value.
    49
end

test more extension communication and also importing plane module from extension
    # Description of the native function my_second_user_extension.more_talk_with_other_extension():
    #
    # It utilizes vm_call_bound_method, vm_instantiate_class, vm_call_attribute_cstring and object_load_attribute
    # to call C functions defined in one extension, from the running extension.
    # It also utilizes vm_import_module and vm_get_module to load the stdlib math module, written in Place,
    # and call a function from it.
    #
    # MaxResult is the result of calling math.max,
    # Text is a result of calling MyThingA.get_text() in the other extension and appending stuff to it,
    # and Number is the result of calling multiply() in the other extension.

    import my_second_user_extension
    result = my_second_user_extension.more_talk_with_other_extension()

    print(result["MaxResult"])
    print(result["Text"])
    print(result["Number"])
expect
    8
    Text received from MyThingA::get_text(): Hyelloooo!
    350
end
