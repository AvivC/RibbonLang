test basic import
    import testmodule
file testmodule.pln
    print("Importing testmodule")
expect
    Importing testmodule
end

test nested imports
    import testmodule1
    print("main")
file testmodule1.pln
    import testmodule2
    print("1")
file testmodule2.pln
    print("2")
expect
    2
    1
    main
end

test module caching
    import testmodule1
    import testmodule1
    import testmodule2
    import testmodule1
    import testmodule2
file testmodule1.pln
    print("I'm testmodule1")
file testmodule2.pln
    print("I'm testmodule2")
expect
    I'm testmodule1
    I'm testmodule2
end

test module attributes
    import testmodule1

    print(testmodule1.attr1)
    print(testmodule1.func1(2))
    print(testmodule1.nonexistent)
    print(testmodule1.func2(2))

    testmodule1.func1 = { takes x to
        return x * 10
    }

    print(testmodule1.func1(2))
    print(testmodule1.func2(2))
file testmodule1.pln
    attr1 = "I'm an attribute"
    func1 = { takes x to
        return x * 2
    }
    func2 = { takes n to
        return func1(n * 2)
    }
expect
    I'm an attribute
    4
    nil
    8
    20
    40
end

test import stdlib module
    import math
    print(math.abs(-4))
expect
    4
end

test user module takes precedence over stdlib module
    import math
    print(math.abs)  # should print nil since math.abs doesn't exist in the user module
    import math  # won't print anything because module is already cached
    print(math.abs)  # should print nil again
file math.pln
    print("I'm the math.pln user module")
expect
    I'm the math.pln user module
    nil
    nil
end

test unfound module raises error
    # Generally we currently lack error-case tests, because the output of errors is temporary
    # and the tests will be fragile. In this case we do write one, and will rewrite it in the future

    import the_pretty_horse_module
    print("This will never print")
expect
    An error has occured. Stack trace (most recent call on top):
        -> <Anonymous function>
    Runtime error: Couldn't find module the_pretty_horse_module.
end

test load stdlib extension module
    import myextension
    print(myextension.multiply(2, 8.5))
expect
    17
end

test load user extension module
    import myuserextension
    print(myuserextension.multiply(8, 4))
expect
    32
end

test extension classes
    import myuserextension

    MyThingA = myuserextension.MyThingA
    
    thing_a = MyThingA("Hello world :D")
    print(thing_a.get_text())

    thing_b = myuserextension.MyThingB(thing_a)
    multiply_func = thing_b.get_text_multiplied
    print(multiply_func(3))
expect
    Hello world :D
    Hello world :DHello world :DHello world :D
end
