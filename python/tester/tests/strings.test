test adding strings
    print("abc" + "abc")
    print("abc" + " " + "abc")
    print("abc" + " " + "def")

    a = "abc"
    b = "def"
    print(a + " " + b)

    str = ""
    n = 0
    while n <= 3 {
        if n == 0 {
            x = "0"
        } elsif n == 1 {
            x = "1"
        } elsif n == 2 {
            x = "2"
        } elsif n == 3 {
            x = "3"
        }

        str = str + x
        n = n + 1
    }
    print(str)
expect
    abcabc
    abc abc
    abc def
    abc def
    0123
end

test illegal to set attribute on string
    # this is a fragile test because we rely on the very specific error output, which is very likely to change.
    # this is why at the time of writing this, we usually don't have tests for specific error conditions (which isn't a great thing).
    # this case is an exception, and we might have to update this test if and when the error output changes.

    text = "hello world"
    a.x = 10
expect
    An error has occured. Stack trace (most recent call on top):
        -> <Anonymous function>
    Runtime error: Cannot set attribute on non-object.
end

test string length method
    text = "abc def g"
    n = text.length()
    print(n)
expect
    9
end

skip test string interning
    import _testing

    a = "one string"
    b = "different string"
    
    print(_testing.same_object(a, b))

    print(_testing.same_object("another string", "yet another one"))

    print(_testing.same_object(a, "one string"))

    print(a + b)
    print(_testing.same_object("one stringdifferent string", "one string" + "different string"))
expect
    false
    false
    true
    true
end

test string key accessor
    text = "abc def g"
    print(text[2])
    print(text[0])
    print(text[8])
    print(text[1] + text[3] + text[6])
expect
    c
    a
    g
    b f
end

test string operations
    text = "hello world!"
    reversed = ""
    i = text.length() - 1
    while i >= 0 {
        reversed = reversed + text[i]
        i = i - 1
    }
    print(reversed)
expect
    !dlrow olleh
end
