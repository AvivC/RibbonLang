test binary_operations
    print(10 + 5)
    print(10 - 5)
    print(10 * 5)
    print(10 / 5)
    print(10.0 / 5.0)
    print(10 / 5.0)
    print(-10 + 5)

    print(10 % 5)
    print(8 % 3.5)
expect
    15
    5
    50
    2
    2
    2
    -5
    0
    1
end

test expression
    print(10 + 5 / 2)
    print((10 + 5) / 2)
    print((10 + 5) * 2 + -5)
    print((10 + 5) * (2 + -5) / 10)
    print((10 + 5.0) * (2 + -5) / 10)
    print(((10 + 5.0) * (2 + 5) / 10) % 6)
    print((10 + 5.0) * (2 + 5) / 10 % 6)
    print((10 + 5.0) * (2 + 5) / (10 % 6))
expect
    12.5
    7.5
    25
    -4.5
    -4.5
    4.5
    4.5
    26.25
end

test modulo with negative numbers unsupported
    10 % -2
expect
    An error has occured. Stack trace (most recent call on top):
        -> <Anonymous function>
    Modulo with negative numbers not supported.
end

test boolean expressions
    print(not true)
    print(not not true)
    print(not false)
    print(not (5 == 5))
    print(not (5 == 5) or not false)

    print(5 > 10)
    print(5 < 10)
    print(5 == 10)
    print(5 != 10)

    print(10 == 10)
    print(10 != 10)
    print(10 < 10)
    print(10 > 10)
    print(10 >= 10)

    print("hello" == "hello")
    print("hello" != "hello")

    print(true == true)
    print(true != false)
    print(true != true)

    print(true and true)
    print(true or true)
    print(false and false)
    print(false or false)
    print(true and false)
    print(true or false)
    print(false and true)
    print(false or true)

    print(10 + 20 > 5)
    print(10 + 20 > 5 and 50 / 2 == 25)
    print(10 + 20 > 5 and 50 / 2 != 25)
    print(10 + 20 > 5 or 50 / 2 != 25)
    print(10 + 20 > 50 or 50 / 2 != 25)
    print(10 + 20 > 50 or 50 / 2 != 25 or true)
    print(10 + 20 > 50 or 50 / 2 != 25 or 100 / 2 == 51)
    print((10 + 20 > 50 or 50 / 2 != 25 or 100 / 2 == 51) and 10 == 10)
    print((10 + 20 > 50 or 50 / 2 != 25 or 100 / 2 == 51) or 10 == 10)
    print(20 / 2 == 10 and (10 * 2 < 10 or 5 == 5))

    a = 50 / 2 != 25
    print(a)
expect
    false
    true
    true
    false
    true
    false
    true
    false
    true
    true
    false
    false
    false
    true
    true
    false
    true
    true
    false
    true
    true
    false
    false
    false
    true
    false
    true
    true
    true
    false
    true
    false
    true
    false
    false
    true
    true
    false
end

test mutation assignment statements
    a = 100

    a += 50
    print(a)

    a /= 2 * 10
    print(a)

    a *= -1
    print(a)

    a -= a * 2
    print(a)

    a += 0.5
    print(a)

    a %= 3
    print(a)
expect
    150
    7.5
    -7.5
    7.5
    8
    2
end

test inplace attribute binary
    C = class {}

    c = C()
    c.x = 10
    c.y = 20

    c.x += 5
    print(c.x)
    c.x *= 2
    print(c.x)
    c.x /= 4
    print(c.x)
    c.x -= 4
    print(c.x)
    c.x %= 2
    print(c.x)
expect
    15
    30
    7.5
    3.5
    1.5
end

test object expression evaluated only once in inplace attribute binary
    C = class {
        @init = { | n |
            self.n = n
        }
    }

    o = C(10)

    f = {
        print("f() called")
        return o
    }

    # We're testing that f() only gets called once per assignment
    f().n *= 2
    print(o.n)

    f().n -= 5
    print(o.n)
expect
    f() called
    20
    f() called
    15
end

test inplace key binary
    t = ["a": 2]

    t["a"] += 4
    print(t["a"])
    t["a"] -= 3
    print(t["a"])
    t["a"] *= 100
    print(t["a"])
    t["a"] /= 10
    print(t["a"])
    t["a"] %= 2
    print(t["a"])
expect
    6
    3
    300
    30
    0
end

test object expression in inplace key binary mutation is evaluated only once
    t = ["a": 2]

    C = class {
        @init = {
            print("@init() called")
        }

        f = { | x |
            print("f() called")
            return t
        }
    }

    C().f(true)["a"] += 4
    print(t["a"])

    C().f(true)["a"] -= 3
    print(t["a"])

    C().f(true)["a"] *= 100
    print(t["a"])

    C().f(true)["a"] /= 10
    print(t["a"])

    C().f(true)["a"] %= 2
    print(t["a"])
    
expect
    @init() called
    f() called
    6
    @init() called
    f() called
    3
    @init() called
    f() called
    300
    @init() called
    f() called
    30
    @init() called
    f() called
    0
end