test nil generally
    print(nil)
    x = nil
    print(x)
expect
    nil
    nil
end

test nil attributes
    C = class {
        @init = { | x, z |
            self.x = x
            self.z = z
            self.y = nil
        }
    }

    c = C(nil, 10)
    c.q = nil

    print(c.x)
    print(c.z)
    print(c.y)
    print(c.q)
expect
    nil
    10
    nil
    nil
end

test nil returned from function
    f1 = {
        print("Some function")
        # returning nil implicitly
    }

    print(f1())

    f2 = {
        print("Another function")
        return nil
    }

    print(f2())

    C = class {
        method = {
            print("Some method")
            return nil
        }
    }

    print(C().method())
expect
    Some function
    nil
    Another function
    nil
    Some method
    nil
end

repeat test surface memory corruptions by validating consistent stdout output
    # By specifying "repeat" on the test, it will not run once, but hundreds of times.
    # Trying to help inconsistent undefined behavior etc surface.

    print("Some text")

    i = 1
    while i <= 12 {
        print("More text: " + to_string(i))
        i = i + 1
    }
expect
    Some text
    More text: 1
    More text: 2
    More text: 3
    More text: 4
    More text: 5
    More text: 6
    More text: 7
    More text: 8
    More text: 9
    More text: 10
    More text: 11
    More text: 12
end

test string concat does not overflow stack
    # We had a bug where string concating would fail to pop the original
    # string, resulting in an overflow in long loops. This test makes sure that bug doesn't come back

    i = 0
    while i < 2500 {
        "s1" + "s2"
        i = i + 1
    }
    print("Success")
expect
    Success
end

test table access does not overflow stack
    t = ["a": 1]

    i = 0
    while i < 2500 {
	    t["a"]
        i = i + 1
    }

    print("Success")
expect
    Success
end

test more than 255 constants is handled correctly
    # this code should create 306 constants in the same code object.
    # things should still work (because in the bytecode the index of a constant is represented using two bytes, not one)
    # this test might not be the best logically, but this is good enough for now.

    a = 20
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a = 12
    a
    a
    a
    a
    a
    a
    a
    a
    a
    print("Just a print passing through here")
    a
    a
    a
    a
    a
    print(a)
    print("Done")
expect
    Just a print passing through here
    12
    Done
end