test native function calls user function
    import _testing
    f = {
        print("I'm a user function")
    }
    _testing.demo_print(f)
expect
    I'm a native function
    I'm a user function
    I'm a native function
end

test native function calls user function with arguments and return value
    import _testing
    f = { takes a, b to
        print("I'm a user callback")
        return a + b
    }
    retval = _testing.call_callback_with_args(f, 10, 5)
    print(retval)
expect
    I'm a native function
    I'm a user callback
    15
end

test native function calls user function that fails
    # This is a super brittle test, for now. Look at the super specific (and certain to change) ugly error output.

    import _testing
    callback = { takes a, b to
        return "" + a + b
    }
    retval = _testing.call_callback_with_args(callback, 10, 20)
    print(retval)
expect
    I'm a native function
    An error has occured. Stack trace (most recent call on top):
        -> callback
        -> call_callback_with_args
        -> <Anonymous function>
    Runtime error: @add function failed.
    An error has occured. Stack trace (most recent call on top):
        -> <Anonymous function>
    Runtime error: Native function failed.
end

test user code calls native code calls user code calls native code
    import _testing

    outer_var1 = 10
    outer_var2 = 20

    callback1 = { takes a, b to
        print("User function 1")
        return _testing.call_callback_with_args(callback2, a * 10, b * 10)
    }

    callback2 = { takes x, y to
        print("User function 2")
        return x + y + outer_var1 + outer_var2
    }

    print("Starting")
    retval = _testing.call_callback_with_args(callback1, 6, 8)
    print(retval)
expect
    Starting
    I'm a native function
    User function 1
    I'm a native function
    User function 2
    170
end

test with nested closures
    import _testing

    callback1 = { takes a, b to
        print("User function 1")
        return _testing.call_callback_with_args({ takes x, y to
            print("User function 2")
            return x + y + a + b
        }, a * 10, b * 10)
    }

    print("Starting")
    retval = _testing.call_callback_with_args(callback1, 6, 8)
    print(retval)
expect
    Starting
    I'm a native function
    User function 1
    I'm a native function
    User function 2
    154
end

test cross module
    import _testing
    import mymodule

    print("Starting")
    retval = _testing.call_callback_with_args(mymodule.callback1, 6, 8)
    print(retval)
file mymodule.pln
    outer_var1 = 10
    outer_var2 = 20

    callback2 = { takes x, y to
        print("User function 2")
        return x + y + outer_var1 + outer_var2
    }

    callback1 = { takes a, b to
        import _testing
        print("User function 1")
        return _testing.call_callback_with_args(callback2, a * 10, b * 10)
    }
expect
    Starting
    I'm a native function
    User function 1
    I'm a native function
    User function 2
    170
end

test descriptors
    import _testing
    import myuserextension

    MyThingA = myuserextension.MyThingA
    thing = MyThingA("Some text :D")
    
    thing.a = 20
    print(_testing.get_value_directly_from_object_attributes(thing, "a")) # Expected to print 20

    _testing.get_value_directly_from_object_attributes(thing, "x") # Expected to print "Attribute not found"

    thing.x = 10

    _testing.get_value_directly_from_object_attributes(thing, "x") # Expected to print "Attribute not found"

    print(thing.x)

    _testing.get_value_directly_from_object_attributes(thing, "x") # Expected to print "Attribute not found"

    thing.x = 30
    print(thing.x)

    print(_testing.get_value_directly_from_object_attributes(thing, "a")) # Expected to print 20

    _testing.get_value_directly_from_object_attributes(thing, "x") # Expected to print "Attribute not found"
expect
    20
    Attribute not found
    Running MyThingA descriptor @set for attribute x. Current value: 0. New value: 10
    Attribute not found
    Running MyThingA descriptor @get for attribute x. Value: 10
    10
    Attribute not found
    Running MyThingA descriptor @set for attribute x. Current value: 10. New value: 30
    Running MyThingA descriptor @get for attribute x. Value: 30
    30
    20
    Attribute not found
end
