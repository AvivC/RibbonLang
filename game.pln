import graphics
import math
sdl = graphics

keyboard = [sdl.SDL_SCANCODE_UP: false, sdl.SDL_SCANCODE_DOWN: false, sdl.SDL_SCANCODE_SPACE: false]

SCREEN_WIDTH = 1000
SCREEN_HEIGHT = 800

Ball = class {
    @init = { takes x, y, texture to
        self.x = x
        self.y = y
        self.dx = 0
        self.dy = 0
        self.texture = texture
        
        details = []
        sdl.query_texture(texture, details)
        self.width = details["w"] / 10
        self.height = details["h"] / 10
    }
    
    apply_force = { takes fx, fy to
        self.dx = self.dx + fx
        self.dy = self.dy + fy
    }
    
    update = {
        self.apply_force(0, 0.1)
        
        self.x = self.x + self.dx
        self.y = self.y + self.dy
        
        if self.y + self.height >= SCREEN_HEIGHT {
            self.dy = self.dy * -1
        }
        
        # if self.y + self.height >= SCREEN_HEIGHT {
            # if(self.dy <= 1) {
                # self.dx = 0
                # self.dy = 0
            # } else {
                # self.negate_force()
                # self.dy = self.dy + 5
            # }
        # }
        
        # self.x = self.x + self.dx
        # self.y = self.y + self.dy
        
    }
}

VeryPsuedoRandomGenerator = class {
    @init = {
        self._numbers = [53, 34536, 867, 92444, -4, 25672, 87531, 30, 1996, 458736, 77, -2, 095617, 242, 10, 593845, 32652, 097865, 561230, 468, 05, 73, 967, 723, 7, 1145329, -42]
        self._i = 0
    }
    
    next_number = {
        self._i = self._i + 1
        if self._i >= self._numbers.length() {
            self._i = 0
        }
        return math.abs(self._numbers[self._i])
    }
}

random = VeryPsuedoRandomGenerator()

Game = class {
    @init = { takes title to
        sdl.init(sdl.SDL_INIT_VIDEO)
        
        self.window = sdl.create_window(title, sdl.SDL_WINDOWPOS_UNDEFINED, sdl.SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, 0)
        
        sdl.set_hint(sdl.SDL_HINT_RENDER_SCALE_QUALITY, "linear")
        self.renderer = sdl.create_renderer(self.window, -1, sdl.SDL_RENDERER_ACCELERATED)
        
        sdl.img_init(sdl.IMG_INIT_PNG)
        sdl.show_cursor(1)

        self.ball_texture = sdl.img_load_texture(self.renderer, "sdl_extension\pictures\ball.png")

        self.balls = []
        
        i = 0
        while i < 300 {
            self.spawn_ball()
            i = i + 1
        }

        self.running = true

        self.prepare_scene()
        
        self.draw()

        self.present_scene()
    }
    
    spawn_ball = {
        randnum = random.next_number()
        random_x = (math.min(SCREEN_WIDTH, randnum) / math.max(SCREEN_WIDTH, randnum)) * SCREEN_WIDTH
        texture = self.ball_texture
        self.balls[self.balls.length()] = Ball(random_x, 0, texture)
    }
    
    prepare_scene = {
        sdl.set_render_draw_color(self.renderer, 128, 230, 5, 255)
        sdl.render_clear(self.renderer)
    }
    
    present_scene = {
        sdl.render_present(self.renderer)
    }
    
    logic = {
        if keyboard[sdl.SDL_SCANCODE_SPACE] {
            self.spawn_ball()
        }
        
        i = 0
        while i < self.balls.length() {
            ball = self.balls[i]
            
            ball.update()
            
            i = i + 1
        }
    }
    
    draw = {
        i = 0
        while i < self.balls.length() {
            ball = self.balls[i]
            ball_details = []
            dest_rect = sdl.Rect(ball.x, ball.y, ball.width, ball.height)
            sdl.render_copy(self.renderer, ball.texture, nil, dest_rect)
            
            i = i + 1
        }
    }
    
    input = {
        event = sdl.poll_event()
        while (event != nil) {
            if event.type == sdl.SDL_QUIT {
                self.running = false
            } elsif event.type == sdl.SDL_KEYUP and event.repeat == 0 {
                keyboard[event.scancode] = false
            } elsif event.type == sdl.SDL_KEYDOWN and event.repeat == 0 {
                keyboard[event.scancode] = true
            }
            
            event = sdl.poll_event()
        }
    }
}

main = {
    game = Game("My Plane Game! :D")
    
    frames_count = 0
    ticks_sum = 0
    
    while game.running {
        frame_start_ticks = sdl.get_ticks()
    
        game.prepare_scene()
        game.input()
        game.logic()
        game.draw()
        game.present_scene()
        
        ticks_since_frame_start = sdl.get_ticks() - frame_start_ticks
        
        if (ticks_since_frame_start < 16) {
            sdl.delay(16 - ticks_since_frame_start)
        }
        
        frames_count = frames_count + 1
        ticks_sum = ticks_sum + (sdl.get_ticks() - frame_start_ticks)
    }
    
    print("Avg frame length in ticks")
    print(ticks_sum / frames_count)
    print("Balls: " + to_string(game.balls.length()))
}

main()