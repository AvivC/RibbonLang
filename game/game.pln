import math
import path

import resources
res = resources
import entities
import input
import graphics
sdl = graphics

renderer = nil
window = nil
balls = []
player = nil
running = false
next_ball_drop = 0

init_sdl = { | title |
    external renderer
    external window

    sdl.init(sdl.SDL_INIT_VIDEO)
    
    window = sdl.create_window(title, sdl.SDL_WINDOWPOS_UNDEFINED, sdl.SDL_WINDOWPOS_UNDEFINED, res.SCREEN_WIDTH, res.SCREEN_HEIGHT, 0)
    
    sdl.set_hint(sdl.SDL_HINT_RENDER_SCALE_QUALITY, "linear")
    renderer = sdl.create_renderer(window, -1, sdl.SDL_RENDERER_ACCELERATED)
    
    sdl.img_init(sdl.IMG_INIT_PNG)
    sdl.show_cursor(1)
}

init_game = { | title |
    external running
    external balls
    external player

    init_sdl(title)
    resources.init(renderer)

    player = entities.Player(res.SCREEN_WIDTH / 2, res.SCREEN_HEIGHT - 160, resources.player_texture)
    balls = []

    running = true
}

spawn_ball = {
    random_x = math.random_in_range(0, res.SCREEN_WIDTH - 220)
    balls.add(entities.Ball(random_x, -200, resources.ball_texture))
}

prepare_scene = {
    sdl.set_render_draw_color(renderer, 128, 230, 5, 255)
    sdl.render_clear(renderer)
}

present_scene = {
    sdl.render_present(renderer)
}

logic = { | dt |
    external next_ball_drop

    player.update(dt)
    player.move(dt)

    for ball in balls {
        ball.update(dt)
        ball.move(dt)
    }

    if time() >= next_ball_drop {
        spawn_ball()
        next_ball_drop += math.random_in_range(1000, 2000)
    }
}

draw = {
    dest_rect = sdl.Rect(player.x, player.y, player.width, player.height)
    sdl.render_copy(renderer, player.texture, nil, dest_rect)

    for ball in balls {
        dest_rect = sdl.Rect(ball.x, ball.y, ball.width, ball.height)
        sdl.render_copy(renderer, ball.texture, nil, dest_rect)
    }
}


main = {
    external running

    init_game("My Plane Game! :D")

    MAX_DT = 1 / res.MAX_FPS
    
    prev_time = 0
    curr_time = sdl.get_ticks() / 1000
    
    dbg_frame_count = 0
    dbg_frames_divided = 0

    while running {
    
        prepare_scene()
        
        if not input.input() {
            running = false
        }
    
        prev_time = curr_time
        curr_time = sdl.get_ticks() / 1000
    
        frame_time = curr_time - prev_time
        
        dbg_x = 0
        while frame_time > 0 {
            dt = math.min(frame_time, MAX_DT)
            logic(dt)
            frame_time = frame_time - dt
            dbg_x += 1
        }
        if dbg_x > 0 {
            dbg_frames_divided += 1
        }
        
        draw()
        
        present_scene()
        
        dbg_frame_count += 1
        
    }

    print("Balls: " + to_string(balls.length()))
    print("Frames: " + to_string(dbg_frame_count))
    print("dbg_frames_divided: " + to_string(dbg_frames_divided))
    print("Relation: " + to_string(dbg_frames_divided / dbg_frame_count))

}

main()