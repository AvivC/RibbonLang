import math
import path

import entities
import input
import graphics
sdl = graphics

MAX_FPS = 50
PLAYER_MAX_SPEED = 7
SCREEN_WIDTH = 1000
SCREEN_HEIGHT = 800

renderer = nil
window = nil

_init_sdl = { | title |
    external renderer
    external window

    sdl.init(sdl.SDL_INIT_VIDEO)
    
    window = sdl.create_window(title, sdl.SDL_WINDOWPOS_UNDEFINED, sdl.SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, 0)
    
    sdl.set_hint(sdl.SDL_HINT_RENDER_SCALE_QUALITY, "linear")
    renderer = sdl.create_renderer(self.window, -1, sdl.SDL_RENDERER_ACCELERATED)
    
    sdl.img_init(sdl.IMG_INIT_PNG)
    sdl.show_cursor(1)
}

init_game = { | title |
    _init_sdl(title)

    ball_texture = sdl.img_load_texture(self.renderer, path.relative_to_main_directory("pictures\ball.png"))
    bullet_texture = sdl.img_load_texture(self.renderer, path.relative_to_main_directory("pictures\bullet.png"))
    
    player_texture = sdl.img_load_texture(self.renderer, path.relative_to_main_directory("pictures\kangaroo.png"))
    player = entities.Player(SCREEN_WIDTH / 2, SCREEN_HEIGHT - 160, player_texture)
    balls = []
    
    last_ball_drop = time()
    next_ball_drop = 0

    running = true
}

spawn_ball = {
    random_x = math.random_in_range(0, SCREEN_WIDTH - 220)
    balls.add(entities.Ball(random_x, -200, self.ball_texture))
}

prepare_scene = {
    sdl.set_render_draw_color(renderer, 128, 230, 5, 255)
    sdl.render_clear(renderer)
}

present_scene = {
    sdl.render_present(renderer)
}

logic = { | dt |
    self.player.update(dt, self)

    for ball in self.balls {
        ball.update(dt)
    }

    if time() >= self.next_ball_drop {
        self.spawn_ball()
        self.next_ball_drop += math.random_in_range(1000, 2000)
    }
}

draw = {
    player = self.player
    dest_rect = sdl.Rect(player.x, player.y, player.width, player.height)
    sdl.render_copy(self.renderer, player.texture, nil, dest_rect)

    for ball in self.balls {
        dest_rect = sdl.Rect(ball.x, ball.y, ball.width, ball.height)
        sdl.render_copy(self.renderer, ball.texture, nil, dest_rect)
    }
}


main = {
    init_game("My Plane Game! :D")

    MAX_DT = 1 / MAX_FPS
    
    prev_time = 0
    curr_time = sdl.get_ticks() / 1000
    
    dbg_frame_count = 0
    dbg_frames_divided = 0
    
    while game.running {
    
        game.prepare_scene()
        
        if not input.input() {
            game.running = false
        }
    
        prev_time = curr_time
        curr_time = sdl.get_ticks() / 1000
    
        frame_time = curr_time - prev_time
        
        dbg_x = 0
        while frame_time > 0 {
            dt = math.min(frame_time, MAX_DT)
            game.logic(dt)
            frame_time = frame_time - dt
            dbg_x = dbg_x + 1
        }
        if dbg_x > 0 {
            dbg_frames_divided = dbg_frames_divided + 1
        }
        
        game.draw()
        
        game.present_scene()
        
        dbg_frame_count = dbg_frame_count + 1
        
    }

    print("Balls: " + to_string(game.balls.length()))
    print("Frames: " + to_string(dbg_frame_count))
    print("dbg_frames_divided: " + to_string(dbg_frames_divided))
    print("Relation: " + to_string(dbg_frames_divided / dbg_frame_count))

}

main()