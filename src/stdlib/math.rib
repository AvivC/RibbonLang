# Standard library module for common math operations

max = { | x, y |
	if x > y {
		return x
	} else {
		return y
	}
}

min = { | x, y |
	if max(x, y) == x {
		return y
	} else {
		return x
	}
}

# TODO: Support fractions
power = { | n, exp |
	if exp < 0 {
		return 1 / power(n, -1 * exp)
	}
	if exp == 0 {
		return 1
	}
	result = n
	i = 1
	while i < exp {
		result = result * n
		i = i + 1
	}
	return result
}

sqr = { | n |
    return power(n, 2)
}

abs = { | x |
    if x >= 0 {
        return x
    }
    return x * -1
}

_SQRT_RECURSION_LIMIT = 75

_sqrt_estimate = { | x, low_bound, high_bound, counter |
    counter = counter + 1
    middle = (low_bound + high_bound) / 2

    if counter >= _SQRT_RECURSION_LIMIT {
        return middle
    }
    
    if sqr(middle) > x {
        return _sqrt_estimate(x, low_bound, middle, counter)
    }
    
    return _sqrt_estimate(x, middle, high_bound, counter)
}

sqrt = { | x |
    return _sqrt_estimate(x, 1, x, 0)
}

random_in_range = { | min, max |
	return random() % (max - min + 1) + min
}

sin = { | radians | 
	return __sin(radians)
}
