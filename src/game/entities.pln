import math
import path

import input
import graphics
sdl = graphics
import resources
res = resources

Entity = class {
    @init = { |x, y, dx, dy, texture|
        self.x = x
        self.y = y
        self.dx = dx
        self.dy = dy
        self.texture = texture

        details = []
        sdl.query_texture(texture, details)
        self.width = details["w"] / 10
        self.height = details["h"] / 10
    }

    apply_force = { |force_x, force_y, dt|
        self.dx += force_x * dt * res.MAX_FPS
        self.dy += force_y * dt * res.MAX_FPS
    }

    move = { |dt|
        self.x += self.dx * dt * res.MAX_FPS
        self.y += self.dy * dt * res.MAX_FPS
    }
}

PLAYER_MAX_SPEED = 20

Player = class : Entity {
    @init = { | x, y, texture |
        super([x, y, 0, 0, texture])
    }

    apply_breaks = { | dt |
        self.apply_force(self.dx * -20, self.dy * -20, dt)
    }

    update = { | dt |
        if input.keyboard[sdl.SDL_SCANCODE_RIGHT] {
            self.apply_force(50, 0, dt)
        } elsif input.keyboard[sdl.SDL_SCANCODE_LEFT] {
            self.apply_force(-50, 0, dt)
        } else {
            self.apply_breaks(dt)
        }
        # if input.keyboard[sdl.SDL_SCANCODE_SPACE] {
        #     game.bullets.add()
        # }

        if math.abs(self.dy) <= 0.05 {
            self.dy = 0
        }
        if math.abs(self.dx) <= 0.05 {
            self.dx = 0
        }

        if math.abs(self.dy) >= PLAYER_MAX_SPEED {
            if self.dy < 0 {
                self.dy = -PLAYER_MAX_SPEED
            } else {
                self.dy = PLAYER_MAX_SPEED
            }
        }
        if math.abs(self.dx) >= PLAYER_MAX_SPEED {
            if self.dx < 0 {
                self.dx = -PLAYER_MAX_SPEED
            } else {
                self.dx = PLAYER_MAX_SPEED
            }
        }
    }
}

Ball = class : Entity {
    @init = { | x, y, texture |
        dx = math.random_in_range(2, 4)
        if math.random_in_range(0, 1) == 0 {
            dx *= -1
        }

        super([x, y, dx, 0, texture])
    }
    
    update = { | dt |
        floor = res.SCREEN_HEIGHT - self.height
        
        if self.y >= floor {
            self.y = floor
        
            self.dy *= -0.8
            self.dx *= 0.95
        } else {
            self.apply_force(0, 1, dt)
        }
        
    }
}
