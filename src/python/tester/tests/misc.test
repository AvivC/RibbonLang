test nil generally
    print(nil)
    x = nil
    print(x)
expect
    nil
    nil
end

test nil attributes
    C = class {
        @init = { | x, z |
            self.x = x
            self.z = z
            self.y = nil
        }
    }

    c = C(nil, 10)
    c.q = nil

    print(c.x)
    print(c.z)
    print(c.y)
    print(c.q)
expect
    nil
    10
    nil
    nil
end

test nil returned from function
    f1 = {
        print("Some function")
        # returning nil implicitly
    }

    print(f1())

    f2 = {
        print("Another function")
        return nil
    }

    print(f2())

    C = class {
        method = {
            print("Some method")
            return nil
        }
    }

    print(C().method())
expect
    Some function
    nil
    Another function
    nil
    Some method
    nil
end

repeat test surface memory corruptions by validating consistent stdout output
    # By specifying "repeat" on the test, it will not run once, but hundreds of times.
    # Trying to help inconsistent undefined behavior etc surface.

    print("Some text")

    i = 1
    while i <= 12 {
        print("More text: " + to_string(i))
        i = i + 1
    }
expect
    Some text
    More text: 1
    More text: 2
    More text: 3
    More text: 4
    More text: 5
    More text: 6
    More text: 7
    More text: 8
    More text: 9
    More text: 10
    More text: 11
    More text: 12
end

test string concat does not overflow stack
    # We had a bug where string concating would fail to pop the original
    # string, resulting in an overflow in long loops. This test makes sure that bug doesn't come back

    i = 0
    while i < 2500 {
        "s1" + "s2"
        i = i + 1
    }
    print("Success")
expect
    Success
end

test table access does not overflow stack
    t = ["a": 1]

    i = 0
    while i < 2500 {
	    t["a"]
        i = i + 1
    }

    print("Success")
expect
    Success
end

test more than 255 constants is handled correctly
    # this code should create 306 constants in the same code object.
    # things should still work (because in the bytecode the index of a constant is represented using two bytes, not one)
    # this test might not be the best logically, but this is good enough for now.

    a = 20
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a
    a = 12
    a
    a
    a
    a
    a
    a
    a
    a
    a
    print("Just a print passing through here")
    a
    a
    a
    a
    a
    print(a)
    print("Done")
expect
    Just a print passing through here
    12
    Done
end

test stack overflow error
    # Note: currently if a native function causes a stack overflow in the language level (obviously by calling a language function),
    # it will be reported as generally a "Native function failed" message, because of the very basic boolean based error reporting mechanism
    # currently in place.
    # In case of a stack overflow caused directly by language code, the test exhibits what happens.
    
    f = {
        f()
    }
    f()
expect
    An error has occured. Stack trace (most recent call on top):
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> f
        -> [... 215 lower frames truncated ...]
    Stack overflow
end

test temporaries are popped off the stack when function returns in the middle
    
    # Test explanation:
    #
    # We had a bug where when a function returns in the middle, some temporaries may
    # be left on the evaluation stack. In specific circumstances, this would surface to the script level and ruin the logic.
    # The code triggering the bug used a for-loop, which behind the scenes stores temporaries on the stack.
    #
    # We fixed the bug in the VM by (at the time of writing this), when calling a function, storing the current
    # eval-stack offset on the stackframe, and re-setting the stack top to that offset (+ 1 for the return value) on OP_RETURN.
    # 
    # This test used to fail when the bug existed, and should help guard against its return.
    # The way it used to fail is it assinged one of the arguments of func() to be the object list_has_value,
    # which has been forgotten on the stack from earlier. It should have been popped, being the "callee" of an earlier invocation,
    # but a left-over temporary has been popped instead, leaving it on the stack.
    # It would get assigned to the argument variable instead of the correct passed in value.
    # The test validates that the correct passed-in values are printed out.

    list_has_value = { | list, value |
        # This function will return in the middle.
        # At that point, some temporary values will be present on the stack.
        # The VM should correctly pop all of them.
        
        for item in list {
            if item == value {
                return true
            }
        }
        
        return false
    }

    as_string = { | object |
        builtin_supported_types = ["Number"]

        if list_has_value(builtin_supported_types, type(object)) {
            return to_string(object)
        }
        
        return "<unrecognized>"
        
    }

    func = { | a, b |
        print("func called on:")
        print(a)
        print(b)
    }

    func(as_string(10), as_string(20))
expect
    func called on:
    10
    20
end
