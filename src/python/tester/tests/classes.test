test empty named class
    Dog = class {}
    print(Dog)
expect
    <Class Dog>
end

test empty anonymous class
    print(class {})
expect
    <Class <Anonymous class>>
end

test class attributes
    Dog = class {
        x = 10
        y = "20"
        z = {
            print("Hello")
        }
    }

    print(Dog.x)
    print(Dog.y)
    Dog.z()

    dog = Dog()
    print(dog.x)
    print(dog.y)
    dog.z()

    Dog.y = 30

    print(Dog.x)
    print(Dog.y)
    Dog.z()

    print(dog.x)
    print(dog.y)
    dog.z()
expect
    10
    20
    Hello
    10
    20
    Hello
    10
    30
    Hello
    10
    30
    Hello
end

test constructors
    Cat = class {
        @init = { | name, favorite_food |
            self.name = name
            self.favorite_food = favorite_food
        }

        meow = { | to_whom |
            print("Meow, " + to_whom)
            print("My name is " + self.name + " and I love " + self.favorite_food + "!")
        }

        breed = { | other_cat |
            self.meow(other_cat.name)
            print("Let's make kittens!")
            return [Cat("Catti", "pizza"), Cat("Cattul", "pasta")]
        }
    }

    cat = Cat("ElCatoo", "lasagna")
    cat.meow("Aviv")

    offspring = cat.breed(Cat("Cattaluna", "kitkat"))
    catti = offspring[0]
    cattul = offspring[1]

    print("First kitten is " + catti.name + " and likes " + catti.favorite_food)
    print("Second kitten is " + cattul.name + " and likes " + cattul.favorite_food)
expect
    Meow, Aviv
    My name is ElCatoo and I love lasagna!
    Meow, Cattaluna
    My name is ElCatoo and I love lasagna!
    Let's make kittens!
    First kitten is Catti and likes pizza
    Second kitten is Cattul and likes pasta
end

test more constructors
    Kangaroo = class {
        @init = {| name |
            self.name = name
            self.color = "brown"
        }

        greet = { | who |
            print("Hello, " + who + "! My name is " + self.name + " and I'm " + self.color + " :D")
        }
    }

    oscar = Kangaroo("Oscar")
    jonblow = Kangaroo("Jonblow")

    oscar.greet("Sonny")
    jonblow.greet("Elisa")
    oscar.greet("Elisa")
    jonblow.greet("Sonny")

    oscargreet = oscar.greet
    jonblowgreet = jonblow.greet
    oscargreet("Bonna")
    jonblowgreet("Bonna")
expect
    Hello, Sonny! My name is Oscar and I'm brown :D
    Hello, Elisa! My name is Jonblow and I'm brown :D
    Hello, Elisa! My name is Oscar and I'm brown :D
    Hello, Sonny! My name is Jonblow and I'm brown :D
    Hello, Bonna! My name is Oscar and I'm brown :D
    Hello, Bonna! My name is Jonblow and I'm brown :D
end

test tribe of proud happy kangaroos living together in peace and harmony jumpin around
    Kangaroo = class {
        @init = {| name |
            self.name = name
            self.color = "brown"
        }

        greet = { | who |
            print("Hello, " + who + "! My name is " + self.name + " and I'm " + self.color + " :D")
        }

        make_baby_kanga = { | name |
            baby = Kangaroo("Little " + name)
            baby.greet(self.name)
            self.greet(baby.name)
            return baby
        }
    }

    KangarooTribe = class {
        @init = { | kangaroos |
            self._kangaroos = kangaroos
            self._index = 0
        }

        next_kanga = {
            if self._index >= self._kangaroos.length() {
                return false
            }

            kanga = self._kangaroos[self._index]
            self._index = self._index + 1
            return kanga
        }
    }

    kangaroos = [ Kangaroo("Sonny"), Kangaroo("Melissa"), Kangaroo("Mr. Anthrex") ]
    tribe = KangarooTribe(kangaroos)

    more_kangas = true
    while more_kangas {
        kanga = tribe.next_kanga()
        if kanga == false {
            more_kangas = false
        } else {
            kanga.greet("Aviv")
            kangreet = kanga.greet
            kangreet("Aviv")
        }
    }

    baby = kangaroos[0].make_baby_kanga("Richard")
    print(baby.name)
expect
    Hello, Aviv! My name is Sonny and I'm brown :D
    Hello, Aviv! My name is Sonny and I'm brown :D
    Hello, Aviv! My name is Melissa and I'm brown :D
    Hello, Aviv! My name is Melissa and I'm brown :D
    Hello, Aviv! My name is Mr. Anthrex and I'm brown :D
    Hello, Aviv! My name is Mr. Anthrex and I'm brown :D
    Hello, Sonny! My name is Little Richard and I'm brown :D
    Hello, Little Richard! My name is Sonny and I'm brown :D
    Little Richard
end

test self is captured by closures in methods
    also_just_some_variable = 100

    Guitar = class {
        @init = { | type |
            if type == "electric" {
                self.style = "rock"
            } else {
                self.style = "classical"
            }
        }

        make_song = { | times |
            return {
                i = 0
                while i < times {
                    print("I'm a " + self.style + " song")
                    i = i + 1
                }

                print(also_just_some_variable)
            }
        }
    }

    myguitar = Guitar("electric")
    song = myguitar.make_song(2)
    song()

    myguitar = Guitar("acoustic")
    song = myguitar.make_song(3)
    song()
expect
    I'm a rock song
    I'm a rock song
    100
    I'm a classical song
    I'm a classical song
    I'm a classical song
    100
end

test more funky classes stuff
    SpeciesMaker = class {

        make_animal = { | species_name, is_carnivor, height |

            return class {
                @init = { | name |
                    self.name = name
                    self.species_name = species_name
                    self.is_carnivor = is_carnivor
                    # height will be used directly from the free variables
                }

                greet = {
                    print("Hello, my name is " + self.name + " and I am a " + self.species_name + "!")

                    if self.is_carnivor {
                        print("I'm eating MEAT")
                    } else {
                        print("I like a good salad :)")
                    }

                    if height > 5 {
                        print("I'm very tall")
                    } else {
                        print("I'm short")
                    }

                    return true  # just for kicks
                }
            }

        }

    }

    maker = SpeciesMaker()

    Dog = maker.make_animal("Dog", true, 2)
    Kangaroo = maker.make_animal("Kangaroo", false, 6)

    milki = Dog("Milki")
    brandy = Dog("Brandy")
    milki.greet()
    brandy.greet()

    chicko = Kangaroo("Chicko")
    lukka = Kangaroo("Lukka")
    chicko.greet()
    lukka.greet()
expect
    Hello, my name is Milki and I am a Dog!
    I'm eating MEAT
    I'm short
    Hello, my name is Brandy and I am a Dog!
    I'm eating MEAT
    I'm short
    Hello, my name is Chicko and I am a Kangaroo!
    I like a good salad :)
    I'm very tall
    Hello, my name is Lukka and I am a Kangaroo!
    I like a good salad :)
    I'm very tall
end

test inheritance
    O = class {
        method_o1 = {
            print("o1")
        }

        method_o2 = {
            print("o2")
        }

        method_o3 = {
            print("o3")
        }
    }

    A = class : O {
        method_a1 = {
            print("a1")
        }

        method_a2 = {
            print("a2")
        }

        method_a3 = { |y|
            return self.x * y
        }

        method_o1 = {
            print("o1 A override")
        }

        method_o2 = {
            print("o2 A override")
        }

        some_other_thing = 8
    }

    B = class : A {
        @init = { |x|
            self.x = x
        }

        method_b1 = {
            print("b1")
        }

        method_a2 = {
            print("b2")
        }

        method_o1 = {
            print("o1 B override")
        }
    }

    b = B(5)
    b.method_a1()
    b.method_a2()
    b.method_b1()
    b.method_o1()
    b.method_o2()
    b.method_o3()
    print(b.method_a3(10))
    print(b.some_other_thing)

    print(is_instance(b, "A"))
expect
    a1
    b2
    b1
    o1 B override
    o2 A override
    o3
    50
    8
    true
end

test inheritance with the super function
    Entity = class {
        @init = { |x, y|
            self.x = x
            self.y = y
        }
    }

    Bullet = class : Entity {
        @init = {
            super([50, 60])
            self.dx = 10
            self.dy = 20
        }
    }

    b = Bullet()
    print(b.x)
    print(b.y)
    print(b.dx)
    print(b.dy)
expect
    50
    60
    10
    20
end
