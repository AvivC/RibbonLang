
C:\Users\owner\programming\myvm>plane.exe code.pln -asm -tree 
==== AST ====


STATEMENTS

. . IMPORT: _testing

. . ASSIGNMENT: details

. . . . ATTRIBUTE: table_details

. . . . Of object:

. . . . . . VARIABLE: _testing

. . ASSIGNMENT: delete

. . . . ATTRIBUTE: table_delete

. . . . Of object:

. . . . . . VARIABLE: _testing

. . ASSIGNMENT: t

. . . . TABLE

. . ASSIGNMENT: f

. . . . FUNCTION

. . . . Parameters: k, v

. . . . Statements:

. . . . . . EXPR_STATEMENT

. . . . . . . . CALL

. . . . . . . . . . VARIABLE: print

. . . . . . . . Arguments:

. . . . . . . . . . STRING: 

. . . . . . EXPR_STATEMENT

. . . . . . . . CALL

. . . . . . . . . . VARIABLE: print

. . . . . . . . Arguments:

. . . . . . . . . . BINARY: +

. . . . . . . . . . Left:

. . . . . . . . . . . . BINARY: +

. . . . . . . . . . . . Left:

. . . . . . . . . . . . . . STRING: Adding key 

. . . . . . . . . . . . Right:

. . . . . . . . . . . . . . VARIABLE: k

. . . . . . . . . . Right:

. . . . . . . . . . . . STRING:  to table.

. . . . . . KEY_ASSIGNMENT

. . . . . . Of object:

. . . . . . . . VARIABLE: t

. . . . . . Key:

. . . . . . . . VARIABLE: k

. . . . . . Value:

. . . . . . . . VARIABLE: v

. . . . . . EXPR_STATEMENT

. . . . . . . . CALL

. . . . . . . . . . VARIABLE: print

. . . . . . . . Arguments:

. . . . . . . . . . STRING: Table:

. . . . . . EXPR_STATEMENT

. . . . . . . . CALL

. . . . . . . . . . VARIABLE: print

. . . . . . . . Arguments:

. . . . . . . . . . VARIABLE: t

. . . . . . EXPR_STATEMENT

. . . . . . . . CALL

. . . . . . . . . . VARIABLE: print

. . . . . . . . Arguments:

. . . . . . . . . . STRING: Details:

. . . . . . EXPR_STATEMENT

. . . . . . . . CALL

. . . . . . . . . . VARIABLE: print

. . . . . . . . Arguments:

. . . . . . . . . . CALL

. . . . . . . . . . . . VARIABLE: details

. . . . . . . . . . Arguments:

. . . . . . . . . . . . VARIABLE: t

. . . . . . EXPR_STATEMENT

. . . . . . . . CALL

. . . . . . . . . . VARIABLE: print

. . . . . . . . Arguments:

. . . . . . . . . . STRING: 

. . ASSIGNMENT: del

. . . . FUNCTION

. . . . Parameters: k

. . . . Statements:

. . . . . . EXPR_STATEMENT

. . . . . . . . CALL

. . . . . . . . . . VARIABLE: print

. . . . . . . . Arguments:

. . . . . . . . . . STRING: 

. . . . . . EXPR_STATEMENT

. . . . . . . . CALL

. . . . . . . . . . VARIABLE: print

. . . . . . . . Arguments:

. . . . . . . . . . BINARY: +

. . . . . . . . . . Left:

. . . . . . . . . . . . BINARY: +

. . . . . . . . . . . . Left:

. . . . . . . . . . . . . . STRING: Removing entry 

. . . . . . . . . . . . Right:

. . . . . . . . . . . . . . VARIABLE: k

. . . . . . . . . . Right:

. . . . . . . . . . . . STRING:  from table.

. . . . . . EXPR_STATEMENT

. . . . . . . . CALL

. . . . . . . . . . VARIABLE: delete

. . . . . . . . Arguments:

. . . . . . . . . . VARIABLE: t

. . . . . . . . . . VARIABLE: k

. . . . . . EXPR_STATEMENT

. . . . . . . . CALL

. . . . . . . . . . VARIABLE: print

. . . . . . . . Arguments:

. . . . . . . . . . STRING: Table:

. . . . . . EXPR_STATEMENT

. . . . . . . . CALL

. . . . . . . . . . VARIABLE: print

. . . . . . . . Arguments:

. . . . . . . . . . VARIABLE: t

. . . . . . EXPR_STATEMENT

. . . . . . . . CALL

. . . . . . . . . . VARIABLE: print

. . . . . . . . Arguments:

. . . . . . . . . . STRING: Details:

. . . . . . EXPR_STATEMENT

. . . . . . . . CALL

. . . . . . . . . . VARIABLE: print

. . . . . . . . Arguments:

. . . . . . . . . . CALL

. . . . . . . . . . . . VARIABLE: details

. . . . . . . . . . Arguments:

. . . . . . . . . . . . VARIABLE: t

. . . . . . EXPR_STATEMENT

. . . . . . . . CALL

. . . . . . . . . . VARIABLE: print

. . . . . . . . Arguments:

. . . . . . . . . . STRING: 

. . EXPR_STATEMENT

. . . . CALL

. . . . . . VARIABLE: f

. . . . Arguments:

. . . . . . STRING: a

. . . . . . CONSTANT: 10

. . EXPR_STATEMENT

. . . . CALL

. . . . . . VARIABLE: f

. . . . Arguments:

. . . . . . STRING: b

. . . . . . CONSTANT: 20

. . EXPR_STATEMENT

. . . . CALL

. . . . . . VARIABLE: f

. . . . Arguments:

. . . . . . STRING: c

. . . . . . CONSTANT: 30

. . EXPR_STATEMENT

. . . . CALL

. . . . . . VARIABLE: f

. . . . Arguments:

. . . . . . STRING: d

. . . . . . CONSTANT: 40

. . EXPR_STATEMENT

. . . . CALL

. . . . . . VARIABLE: f

. . . . Arguments:

. . . . . . STRING: e

. . . . . . CONSTANT: 50

. . EXPR_STATEMENT

. . . . CALL

. . . . . . VARIABLE: f

. . . . Arguments:

. . . . . . STRING: f

. . . . . . CONSTANT: 60

. . EXPR_STATEMENT

. . . . CALL

. . . . . . VARIABLE: f

. . . . Arguments:

. . . . . . STRING: g

. . . . . . CONSTANT: 70

. . EXPR_STATEMENT

. . . . CALL

. . . . . . VARIABLE: f

. . . . Arguments:

. . . . . . STRING: h

. . . . . . CONSTANT: 80

. . EXPR_STATEMENT

. . . . CALL

. . . . . . VARIABLE: del

. . . . Arguments:

. . . . . . STRING: e

. . EXPR_STATEMENT

. . . . CALL

. . . . . . VARIABLE: del

. . . . Arguments:

. . . . . . STRING: a

. . EXPR_STATEMENT

. . . . CALL

. . . . . . VARIABLE: print

. . . . Arguments:

. . . . . . KEY_ACCESS

. . . . . . On object:

. . . . . . . . VARIABLE: t

. . . . . . Key:

. . . . . . . . STRING: a

. . EXPR_STATEMENT

. . . . CALL

. . . . . . VARIABLE: f

. . . . Arguments:

. . . . . . STRING: i

. . . . . . CONSTANT: 80

. . EXPR_STATEMENT

. . . . CALL

. . . . . . VARIABLE: f

. . . . Arguments:

. . . . . . STRING: j

. . . . . . CONSTANT: 80

. . EXPR_STATEMENT

. . . . CALL

. . . . . . VARIABLE: f

. . . . Arguments:

. . . . . . STRING: k

. . . . . . CONSTANT: 80

. . EXPR_STATEMENT

. . . . CALL

. . . . . . VARIABLE: f

. . . . Arguments:

. . . . . . STRING: l

. . . . . . CONSTANT: 80

. . EXPR_STATEMENT

. . . . CALL

. . . . . . VARIABLE: del

. . . . Arguments:

. . . . . . STRING: b

. . EXPR_STATEMENT

. . . . CALL

. . . . . . VARIABLE: del

. . . . Arguments:

. . . . . . STRING: c

. . EXPR_STATEMENT

. . . . CALL

. . . . . . VARIABLE: del

. . . . Arguments:

. . . . . . STRING: d

. . EXPR_STATEMENT

. . . . CALL

. . . . . . VARIABLE: del

. . . . Arguments:

. . . . . . STRING: f

. . EXPR_STATEMENT

. . . . CALL

. . . . . . VARIABLE: del

. . . . Arguments:

. . . . . . STRING: l

. . ASSIGNMENT: i

. . . . CONSTANT: 0

. . WHILE

. . Condition:

. . . . BINARY: <

. . . . Left:

. . . . . . VARIABLE: i

. . . . Right:

. . . . . . CONSTANT: 15

. . Body:

. . . . STATEMENTS

. . . . . . EXPR_STATEMENT

. . . . . . . . CALL

. . . . . . . . . . VARIABLE: f

. . . . . . . . Arguments:

. . . . . . . . . . CALL

. . . . . . . . . . . . VARIABLE: to_string

. . . . . . . . . . Arguments:

. . . . . . . . . . . . VARIABLE: i

. . . . . . . . . . CONSTANT: 22

. . . . . . ASSIGNMENT: i

. . . . . . . . BINARY: +

. . . . . . . . Left:

. . . . . . . . . . VARIABLE: i

. . . . . . . . Right:

. . . . . . . . . . CONSTANT: 1

. . EXPR_STATEMENT

. . . . CALL

. . . . . . VARIABLE: print

. . . . Arguments:

. . . . . . KEY_ACCESS

. . . . . . On object:

. . . . . . . . VARIABLE: t

. . . . . . Key:

. . . . . . . . STRING: 9

. . EXPR_STATEMENT

. . . . CALL

. . . . . . VARIABLE: print

. . . . Arguments:

. . . . . . KEY_ACCESS

. . . . . . On object:

. . . . . . . . VARIABLE: t

. . . . . . Key:

. . . . . . . . STRING: d

==== Bytecode ====

0   000000000034BF40 OP_IMPORT                    _testing
2   000000000034BF42 OP_LOAD_VARIABLE             _testing
4   000000000034BF44 OP_GET_ATTRIBUTE             table_details
6   000000000034BF46 OP_SET_VARIABLE              details
8   000000000034BF48 OP_LOAD_VARIABLE             _testing
10  000000000034BF4A OP_GET_ATTRIBUTE             table_delete
12  000000000034BF4C OP_SET_VARIABLE              delete
14  000000000034BF4E OP_MAKE_TABLE                0
16  000000000034BF50 OP_SET_VARIABLE              t
18  000000000034BF52 OP_MAKE_FUNCTION             <Code object at 000000000033B200>, k, v
24  000000000034BF58 OP_SET_VARIABLE              f
26  000000000034BF5A OP_MAKE_FUNCTION             <Code object at 0000000000341940>, k
31  000000000034BF5F OP_SET_VARIABLE              del
33  000000000034BF61 OP_CONSTANT                  10
35  000000000034BF63 OP_MAKE_STRING               a
37  000000000034BF65 OP_LOAD_VARIABLE             f
39  000000000034BF67 OP_CALL                      2
41  000000000034BF69 OP_POP
42  000000000034BF6A OP_CONSTANT                  20
44  000000000034BF6C OP_MAKE_STRING               b
46  000000000034BF6E OP_LOAD_VARIABLE             f
48  000000000034BF70 OP_CALL                      2
50  000000000034BF72 OP_POP
51  000000000034BF73 OP_CONSTANT                  30
53  000000000034BF75 OP_MAKE_STRING               c
55  000000000034BF77 OP_LOAD_VARIABLE             f
57  000000000034BF79 OP_CALL                      2
59  000000000034BF7B OP_POP
60  000000000034BF7C OP_CONSTANT                  40
62  000000000034BF7E OP_MAKE_STRING               d
64  000000000034BF80 OP_LOAD_VARIABLE             f
66  000000000034BF82 OP_CALL                      2
68  000000000034BF84 OP_POP
69  000000000034BF85 OP_CONSTANT                  50
71  000000000034BF87 OP_MAKE_STRING               e
73  000000000034BF89 OP_LOAD_VARIABLE             f
75  000000000034BF8B OP_CALL                      2
77  000000000034BF8D OP_POP
78  000000000034BF8E OP_CONSTANT                  60
80  000000000034BF90 OP_MAKE_STRING               f
82  000000000034BF92 OP_LOAD_VARIABLE             f
84  000000000034BF94 OP_CALL                      2
86  000000000034BF96 OP_POP
87  000000000034BF97 OP_CONSTANT                  70
89  000000000034BF99 OP_MAKE_STRING               g
91  000000000034BF9B OP_LOAD_VARIABLE             f
93  000000000034BF9D OP_CALL                      2
95  000000000034BF9F OP_POP
96  000000000034BFA0 OP_CONSTANT                  80
98  000000000034BFA2 OP_MAKE_STRING               h
100 000000000034BFA4 OP_LOAD_VARIABLE             f
102 000000000034BFA6 OP_CALL                      2
104 000000000034BFA8 OP_POP
105 000000000034BFA9 OP_MAKE_STRING               e
107 000000000034BFAB OP_LOAD_VARIABLE             del
109 000000000034BFAD OP_CALL                      1
111 000000000034BFAF OP_POP
112 000000000034BFB0 OP_MAKE_STRING               a
114 000000000034BFB2 OP_LOAD_VARIABLE             del
116 000000000034BFB4 OP_CALL                      1
118 000000000034BFB6 OP_POP
119 000000000034BFB7 OP_MAKE_STRING               a
121 000000000034BFB9 OP_LOAD_VARIABLE             t
123 000000000034BFBB OP_ACCESS_KEY
124 000000000034BFBC OP_LOAD_VARIABLE             print
126 000000000034BFBE OP_CALL                      1
128 000000000034BFC0 OP_POP
129 000000000034BFC1 OP_CONSTANT                  80
131 000000000034BFC3 OP_MAKE_STRING               i
133 000000000034BFC5 OP_LOAD_VARIABLE             f
135 000000000034BFC7 OP_CALL                      2
137 000000000034BFC9 OP_POP
138 000000000034BFCA OP_CONSTANT                  80
140 000000000034BFCC OP_MAKE_STRING               j
142 000000000034BFCE OP_LOAD_VARIABLE             f
144 000000000034BFD0 OP_CALL                      2
146 000000000034BFD2 OP_POP
147 000000000034BFD3 OP_CONSTANT                  80
149 000000000034BFD5 OP_MAKE_STRING               k
151 000000000034BFD7 OP_LOAD_VARIABLE             f
153 000000000034BFD9 OP_CALL                      2
155 000000000034BFDB OP_POP
156 000000000034BFDC OP_CONSTANT                  80
158 000000000034BFDE OP_MAKE_STRING               l
160 000000000034BFE0 OP_LOAD_VARIABLE             f
162 000000000034BFE2 OP_CALL                      2
164 000000000034BFE4 OP_POP
165 000000000034BFE5 OP_MAKE_STRING               b
167 000000000034BFE7 OP_LOAD_VARIABLE             del
169 000000000034BFE9 OP_CALL                      1
171 000000000034BFEB OP_POP
172 000000000034BFEC OP_MAKE_STRING               c
174 000000000034BFEE OP_LOAD_VARIABLE             del
176 000000000034BFF0 OP_CALL                      1
178 000000000034BFF2 OP_POP
179 000000000034BFF3 OP_MAKE_STRING               d
181 000000000034BFF5 OP_LOAD_VARIABLE             del
183 000000000034BFF7 OP_CALL                      1
185 000000000034BFF9 OP_POP
186 000000000034BFFA OP_MAKE_STRING               f
188 000000000034BFFC OP_LOAD_VARIABLE             del
190 000000000034BFFE OP_CALL                      1
192 000000000034C000 OP_POP
193 000000000034C001 OP_MAKE_STRING               l
195 000000000034C003 OP_LOAD_VARIABLE             del
197 000000000034C005 OP_CALL                      1
199 000000000034C007 OP_POP
200 000000000034C008 OP_CONSTANT                  0
202 000000000034C00A OP_SET_VARIABLE              i
204 000000000034C00C OP_LOAD_VARIABLE             i
206 000000000034C00E OP_CONSTANT                  15
208 000000000034C010 OP_LESS_THAN
209 000000000034C011 OP_JUMP_IF_FALSE             235
212 000000000034C014 OP_CONSTANT                  22
214 000000000034C016 OP_LOAD_VARIABLE             i
216 000000000034C018 OP_LOAD_VARIABLE             to_string
218 000000000034C01A OP_CALL                      1
220 000000000034C01C OP_LOAD_VARIABLE             f
222 000000000034C01E OP_CALL                      2
224 000000000034C020 OP_POP
225 000000000034C021 OP_LOAD_VARIABLE             i
227 000000000034C023 OP_CONSTANT                  1
229 000000000034C025 OP_ADD
230 000000000034C026 OP_SET_VARIABLE              i
232 000000000034C028 OP_JUMP                      204
235 000000000034C02B OP_MAKE_STRING               9
237 000000000034C02D OP_LOAD_VARIABLE             t
239 000000000034C02F OP_ACCESS_KEY
240 000000000034C030 OP_LOAD_VARIABLE             print
242 000000000034C032 OP_CALL                      1
244 000000000034C034 OP_POP
245 000000000034C035 OP_MAKE_STRING               d
247 000000000034C037 OP_LOAD_VARIABLE             t
249 000000000034C039 OP_ACCESS_KEY
250 000000000034C03A OP_LOAD_VARIABLE             print
252 000000000034C03C OP_CALL                      1
254 000000000034C03E OP_POP
255 000000000034C03F OP_NIL
256 000000000034C040 OP_RETURN

Inner chunk [index 22]:
0   00000000003CFD00 OP_MAKE_STRING               
2   00000000003CFD02 OP_LOAD_VARIABLE             print
4   00000000003CFD04 OP_CALL                      1
6   00000000003CFD06 OP_POP
7   00000000003CFD07 OP_MAKE_STRING               Adding key 
9   00000000003CFD09 OP_LOAD_VARIABLE             k
11  00000000003CFD0B OP_ADD
12  00000000003CFD0C OP_MAKE_STRING                to table.
14  00000000003CFD0E OP_ADD
15  00000000003CFD0F OP_LOAD_VARIABLE             print
17  00000000003CFD11 OP_CALL                      1
19  00000000003CFD13 OP_POP
20  00000000003CFD14 OP_LOAD_VARIABLE             v
22  00000000003CFD16 OP_LOAD_VARIABLE             k
24  00000000003CFD18 OP_LOAD_VARIABLE             t
26  00000000003CFD1A OP_SET_KEY
27  00000000003CFD1B OP_MAKE_STRING               Table:
29  00000000003CFD1D OP_LOAD_VARIABLE             print
31  00000000003CFD1F OP_CALL                      1
33  00000000003CFD21 OP_POP
34  00000000003CFD22 OP_LOAD_VARIABLE             t
36  00000000003CFD24 OP_LOAD_VARIABLE             print
38  00000000003CFD26 OP_CALL                      1
40  00000000003CFD28 OP_POP
41  00000000003CFD29 OP_MAKE_STRING               Details:
43  00000000003CFD2B OP_LOAD_VARIABLE             print
45  00000000003CFD2D OP_CALL                      1
47  00000000003CFD2F OP_POP
48  00000000003CFD30 OP_LOAD_VARIABLE             t
50  00000000003CFD32 OP_LOAD_VARIABLE             details
52  00000000003CFD34 OP_CALL                      1
54  00000000003CFD36 OP_LOAD_VARIABLE             print
56  00000000003CFD38 OP_CALL                      1
58  00000000003CFD3A OP_POP
59  00000000003CFD3B OP_MAKE_STRING               
61  00000000003CFD3D OP_LOAD_VARIABLE             print
63  00000000003CFD3F OP_CALL                      1
65  00000000003CFD41 OP_POP
66  00000000003CFD42 OP_NIL
67  00000000003CFD43 OP_RETURN

Constant table of chunk pointing at '00000000003CFD00':
0:  [ type 5 ]
1: print [ type 5 ]
2: Adding key  [ type 5 ]
3: k [ type 5 ]
4:  to table. [ type 5 ]
5: print [ type 5 ]
6: v [ type 5 ]
7: k [ type 5 ]
8: t [ type 5 ]
9: Table: [ type 5 ]
10: print [ type 5 ]
11: t [ type 5 ]
12: print [ type 5 ]
13: Details: [ type 5 ]
14: print [ type 5 ]
15: t [ type 5 ]
16: details [ type 5 ]
17: print [ type 5 ]
18:  [ type 5 ]
19: print [ type 5 ]

Inner chunk [index 40]:
0   00000000003CFE20 OP_MAKE_STRING               
2   00000000003CFE22 OP_LOAD_VARIABLE             print
4   00000000003CFE24 OP_CALL                      1
6   00000000003CFE26 OP_POP
7   00000000003CFE27 OP_MAKE_STRING               Removing entry 
9   00000000003CFE29 OP_LOAD_VARIABLE             k
11  00000000003CFE2B OP_ADD
12  00000000003CFE2C OP_MAKE_STRING                from table.
14  00000000003CFE2E OP_ADD
15  00000000003CFE2F OP_LOAD_VARIABLE             print
17  00000000003CFE31 OP_CALL                      1
19  00000000003CFE33 OP_POP
20  00000000003CFE34 OP_LOAD_VARIABLE             k
22  00000000003CFE36 OP_LOAD_VARIABLE             t
24  00000000003CFE38 OP_LOAD_VARIABLE             delete
26  00000000003CFE3A OP_CALL                      2
28  00000000003CFE3C OP_POP
29  00000000003CFE3D OP_MAKE_STRING               Table:
31  00000000003CFE3F OP_LOAD_VARIABLE             print
33  00000000003CFE41 OP_CALL                      1
35  00000000003CFE43 OP_POP
36  00000000003CFE44 OP_LOAD_VARIABLE             t
38  00000000003CFE46 OP_LOAD_VARIABLE             print
40  00000000003CFE48 OP_CALL                      1
42  00000000003CFE4A OP_POP
43  00000000003CFE4B OP_MAKE_STRING               Details:
45  00000000003CFE4D OP_LOAD_VARIABLE             print
47  00000000003CFE4F OP_CALL                      1
49  00000000003CFE51 OP_POP
50  00000000003CFE52 OP_LOAD_VARIABLE             t
52  00000000003CFE54 OP_LOAD_VARIABLE             details
54  00000000003CFE56 OP_CALL                      1
56  00000000003CFE58 OP_LOAD_VARIABLE             print
58  00000000003CFE5A OP_CALL                      1
60  00000000003CFE5C OP_POP
61  00000000003CFE5D OP_MAKE_STRING               
63  00000000003CFE5F OP_LOAD_VARIABLE             print
65  00000000003CFE61 OP_CALL                      1
67  00000000003CFE63 OP_POP
68  00000000003CFE64 OP_NIL
69  00000000003CFE65 OP_RETURN

Constant table of chunk pointing at '00000000003CFE20':
0:  [ type 5 ]
1: print [ type 5 ]
2: Removing entry  [ type 5 ]
3: k [ type 5 ]
4:  from table. [ type 5 ]
5: print [ type 5 ]
6: k [ type 5 ]
7: t [ type 5 ]
8: delete [ type 5 ]
9: Table: [ type 5 ]
10: print [ type 5 ]
11: t [ type 5 ]
12: print [ type 5 ]
13: Details: [ type 5 ]
14: print [ type 5 ]
15: t [ type 5 ]
16: details [ type 5 ]
17: print [ type 5 ]
18:  [ type 5 ]
19: print [ type 5 ]

Constant table of chunk pointing at '000000000034BF40':
0: _testing [ type 5 ]
1: _testing [ type 5 ]
2: table_details [ type 5 ]
3: details [ type 5 ]
4: _testing [ type 5 ]
5: table_delete [ type 5 ]
6: delete [ type 5 ]
7: t [ type 5 ]
8: print [ type 5 ]
9: k [ type 5 ]
10: print [ type 5 ]
11: v [ type 5 ]
12: k [ type 5 ]
13: t [ type 5 ]
14: print [ type 5 ]
15: t [ type 5 ]
16: print [ type 5 ]
17: print [ type 5 ]
18: t [ type 5 ]
19: details [ type 5 ]
20: print [ type 5 ]
21: print [ type 5 ]
22: <Code object at 000000000033B200> [ type 5 ]
23: k [ type 5 ]
24: v [ type 5 ]
25: f [ type 5 ]
26: print [ type 5 ]
27: k [ type 5 ]
28: print [ type 5 ]
29: k [ type 5 ]
30: t [ type 5 ]
31: delete [ type 5 ]
32: print [ type 5 ]
33: t [ type 5 ]
34: print [ type 5 ]
35: print [ type 5 ]
36: t [ type 5 ]
37: details [ type 5 ]
38: print [ type 5 ]
39: print [ type 5 ]
40: <Code object at 0000000000341940> [ type 5 ]
41: k [ type 5 ]
42: del [ type 5 ]
43: 10 [ type 0 ]
44: a [ type 5 ]
45: f [ type 5 ]
46: 20 [ type 0 ]
47: b [ type 5 ]
48: f [ type 5 ]
49: 30 [ type 0 ]
50: c [ type 5 ]
51: f [ type 5 ]
52: 40 [ type 0 ]
53: d [ type 5 ]
54: f [ type 5 ]
55: 50 [ type 0 ]
56: e [ type 5 ]
57: f [ type 5 ]
58: 60 [ type 0 ]
59: f [ type 5 ]
60: f [ type 5 ]
61: 70 [ type 0 ]
62: g [ type 5 ]
63: f [ type 5 ]
64: 80 [ type 0 ]
65: h [ type 5 ]
66: f [ type 5 ]
67: e [ type 5 ]
68: del [ type 5 ]
69: a [ type 5 ]
70: del [ type 5 ]
71: a [ type 5 ]
72: t [ type 5 ]
73: print [ type 5 ]
74: 80 [ type 0 ]
75: i [ type 5 ]
76: f [ type 5 ]
77: 80 [ type 0 ]
78: j [ type 5 ]
79: f [ type 5 ]
80: 80 [ type 0 ]
81: k [ type 5 ]
82: f [ type 5 ]
83: 80 [ type 0 ]
84: l [ type 5 ]
85: f [ type 5 ]
86: b [ type 5 ]
87: del [ type 5 ]
88: c [ type 5 ]
89: del [ type 5 ]
90: d [ type 5 ]
91: del [ type 5 ]
92: f [ type 5 ]
93: del [ type 5 ]
94: l [ type 5 ]
95: del [ type 5 ]
96: 0 [ type 0 ]
97: i [ type 5 ]
98: i [ type 5 ]
99: 15 [ type 0 ]
100: 22 [ type 0 ]
101: i [ type 5 ]
102: to_string [ type 5 ]
103: f [ type 5 ]
104: i [ type 5 ]
105: 1 [ type 0 ]
106: i [ type 5 ]
107: 9 [ type 5 ]
108: t [ type 5 ]
109: print [ type 5 ]
110: d [ type 5 ]
111: t [ type 5 ]
112: print [ type 5 ]

================

Adding key a to table.
Table:
[a: 10]
Details:
[collision_count: 0, capacity: 8, num_entries: 1, count: 1]


Adding key b to table.
Table:
[a: 10, b: 20]
Details:
[collision_count: 0, capacity: 8, num_entries: 2, count: 2]


Adding key c to table.
Table:
[c: 30, a: 10, b: 20]
Details:
[collision_count: 0, capacity: 8, num_entries: 3, count: 3]


Adding key d to table.
Table:
[c: 30, d: 40, a: 10, b: 20]
Details:
[collision_count: 0, capacity: 8, num_entries: 4, count: 4]


Adding key e to table.
Table:
[c: 30, d: 40, e: 50, a: 10, b: 20]
Details:
[collision_count: 0, capacity: 8, num_entries: 5, count: 5]


Adding key f to table.
Table:
[a: 10, b: 20, c: 30, d: 40, e: 50, f: 60]
Details:
[collision_count: 0, capacity: 16, num_entries: 6, count: 6]


Adding key g to table.
Table:
[a: 10, b: 20, c: 30, d: 40, e: 50, f: 60, g: 70]
Details:
[collision_count: 0, capacity: 16, num_entries: 7, count: 7]


Adding key h to table.
Table:
[a: 10, b: 20, c: 30, d: 40, e: 50, f: 60, g: 70, h: 80]
Details:
[collision_count: 0, capacity: 16, num_entries: 8, count: 8]


Removing entry e from table.
Table:
[a: 10, b: 20, c: 30, d: 40, f: 60, g: 70, h: 80]
Details:
[collision_count: 0, capacity: 16, num_entries: 7, count: 8]


Removing entry a from table.
Table:
[b: 20, c: 30, d: 40, f: 60, g: 70, h: 80]
Details:
[collision_count: 0, capacity: 16, num_entries: 6, count: 8]

nil

Adding key i to table.
Table:
[b: 20, c: 30, d: 40, f: 60, g: 70, h: 80, i: 80]
Details:
[collision_count: 1, capacity: 16, num_entries: 7, count: 9]


Adding key j to table.
Table:
[b: 20, c: 30, d: 40, f: 60, g: 70, h: 80, i: 80, j: 80]
Details:
[collision_count: 1, capacity: 16, num_entries: 8, count: 10]


Adding key k to table.
Table:
[k: 80, b: 20, c: 30, d: 40, f: 60, g: 70, h: 80, i: 80, j: 80]
Details:
[collision_count: 1, capacity: 16, num_entries: 9, count: 11]


Adding key l to table.
Table:
[b: 20, c: 30, d: 40, f: 60, g: 70, h: 80, i: 80, j: 80, k: 80, l: 80]
Details:
[collision_count: 0, capacity: 32, num_entries: 10, count: 10]


Removing entry b from table.
Table:
[c: 30, d: 40, f: 60, g: 70, h: 80, i: 80, j: 80, k: 80, l: 80]
Details:
[collision_count: 0, capacity: 32, num_entries: 9, count: 10]


Removing entry c from table.
Table:
[d: 40, f: 60, g: 70, h: 80, i: 80, j: 80, k: 80, l: 80]
Details:
[collision_count: 0, capacity: 32, num_entries: 8, count: 10]


Removing entry d from table.
Table:
[f: 60, g: 70, h: 80, i: 80, j: 80, k: 80, l: 80]
Details:
[collision_count: 0, capacity: 32, num_entries: 7, count: 10]


Removing entry f from table.
Table:
[g: 70, h: 80, i: 80, j: 80, k: 80, l: 80]
Details:
[collision_count: 0, capacity: 32, num_entries: 6, count: 10]


Removing entry l from table.
Table:
[g: 70, h: 80, i: 80, j: 80, k: 80]
Details:
[collision_count: 0, capacity: 32, num_entries: 5, count: 10]


Adding key 0 to table.
Table:
[g: 70, h: 80, i: 80, j: 80, k: 80, 0: 22]
Details:
[collision_count: 0, capacity: 32, num_entries: 6, count: 11]


Adding key 1 to table.
Table:
[g: 70, h: 80, i: 80, j: 80, k: 80, 0: 22, 1: 22]
Details:
[collision_count: 0, capacity: 32, num_entries: 7, count: 12]


Adding key 2 to table.
Table:
[g: 70, h: 80, i: 80, j: 80, k: 80, 0: 22, 1: 22, 2: 22]
Details:
[collision_count: 0, capacity: 32, num_entries: 8, count: 13]


Adding key 3 to table.
Table:
[g: 70, h: 80, i: 80, j: 80, k: 80, 0: 22, 1: 22, 2: 22, 3: 22]
Details:
[collision_count: 0, capacity: 32, num_entries: 9, count: 14]


Adding key 4 to table.
Table:
[g: 70, h: 80, i: 80, j: 80, k: 80, 0: 22, 1: 22, 2: 22, 3: 22, 4: 22]
Details:
[collision_count: 0, capacity: 32, num_entries: 10, count: 15]


Adding key 5 to table.
Table:
[g: 70, h: 80, i: 80, j: 80, k: 80, 0: 22, 1: 22, 2: 22, 3: 22, 4: 22, 5: 22]
Details:
[collision_count: 0, capacity: 32, num_entries: 11, count: 16]


Adding key 6 to table.
Table:
[g: 70, h: 80, i: 80, j: 80, k: 80, 0: 22, 1: 22, 2: 22, 3: 22, 4: 22, 5: 22, 6: 22]
Details:
[collision_count: 0, capacity: 32, num_entries: 12, count: 17]


Adding key 7 to table.
Table:
[g: 70, h: 80, i: 80, j: 80, k: 80, 0: 22, 1: 22, 2: 22, 3: 22, 4: 22, 5: 22, 6: 22, 7: 22]
Details:
[collision_count: 0, capacity: 32, num_entries: 13, count: 18]


Adding key 8 to table.
Table:
[g: 70, h: 80, i: 80, j: 80, k: 80, 0: 22, 1: 22, 2: 22, 3: 22, 4: 22, 5: 22, 6: 22, 7: 22, 8: 22]
Details:
[collision_count: 0, capacity: 32, num_entries: 14, count: 19]


Adding key 9 to table.
Table:
[g: 70, h: 80, i: 80, j: 80, k: 80, 0: 22, 1: 22, 2: 22, 3: 22, 4: 22, 5: 22, 6: 22, 7: 22, 8: 22, 9: 22]
Details:
[collision_count: 0, capacity: 32, num_entries: 15, count: 20]


Adding key 10 to table.
Table:
[10: 22, g: 70, h: 80, i: 80, j: 80, k: 80, 0: 22, 1: 22, 2: 22, 3: 22, 4: 22, 5: 22, 6: 22, 7: 22, 8: 22, 9: 22]
Details:
[collision_count: 0, capacity: 32, num_entries: 16, count: 21]


Adding key 11 to table.
Table:
[10: 22, 11: 22, g: 70, h: 80, i: 80, j: 80, k: 80, 0: 22, 1: 22, 2: 22, 3: 22, 4: 22, 5: 22, 6: 22, 7: 22, 8: 22, 9: 22]
Details:
[collision_count: 1, capacity: 32, num_entries: 17, count: 22]


Adding key 12 to table.
Table:
[10: 22, 11: 22, 12: 22, g: 70, h: 80, i: 80, j: 80, k: 80, 0: 22, 1: 22, 2: 22, 3: 22, 4: 22, 5: 22, 6: 22, 7: 22, 8: 22, 9: 22]
Details:
[collision_count: 2, capacity: 32, num_entries: 18, count: 23]


Adding key 13 to table.
Table:
[10: 22, 11: 22, 12: 22, 13: 22, g: 70, h: 80, i: 80, j: 80, k: 80, 0: 22, 1: 22, 2: 22, 3: 22, 4: 22, 5: 22, 6: 22, 7: 22, 8: 22, 9: 22]
Details:
[collision_count: 0, capacity: 64, num_entries: 19, count: 19]


Adding key 14 to table.
Table:
[10: 22, 11: 22, 12: 22, 13: 22, 14: 22, g: 70, h: 80, i: 80, j: 80, k: 80, 0: 22, 1: 22, 2: 22, 3: 22, 4: 22, 5: 22, 6: 22, 7: 22, 8: 22, 9: 22]
Details:
[collision_count: 0, capacity: 64, num_entries: 20, count: 20]

22
nil
======== Memory diagnostics ========
*******
All memory freed.
*******
*******
All allocations freed.
*******
*******
No live objects.
*******
======== End memory diagnostics ========
